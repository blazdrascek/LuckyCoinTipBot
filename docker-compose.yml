version: "3"

services:
  data-sentinel:
    image: postgres:16
    container_name: tipbot-data-sentinel
    restart: unless-stopped
    volumes:
      - tipbot_data:/var/lib/postgresql/data
    command:
      - /bin/sh
      - -lc
      - >
        set -euo pipefail;
        D=/var/lib/postgresql/data; READY=/tmp/healthy;
        if [ ! -s "$$D/PG_VERSION" ]; then
          echo "[sentinel] FATAL: $$D is empty (PG_VERSION missing). Refusing init."; exit 42;
        fi;
        PGC=$$(command -v pg_controldata || echo /usr/lib/postgresql/16/bin/pg_controldata);
        SYSID_FILE="$$D/TIPBOT_SYSID";
        CUR=$$($$PGC "$$D" | awk -F': *' '/Database system identifier/{print $$2}');
        if [ -s "$$SYSID_FILE" ]; then
          OLD=$$(cat "$$SYSID_FILE");
          if [ "$$OLD" != "$$CUR" ]; then
            echo "[sentinel] FATAL: system identifier changed ($$OLD -> $$CUR). Refusing start."; exit 43;
          fi;
        else
          echo "$$CUR" > "$$SYSID_FILE";
        fi;
        touch "$$D/TIPBOT_SAFEGUARD";
        touch "$$READY";
        echo "[sentinel] OK: cluster present & id verified.";
        exec tail -f /dev/null
    healthcheck:
      test: ["CMD-SHELL", "test -f /tmp/healthy"]
      interval: 5s
      timeout: 3s
      retries: 30
    logging:
      driver: json-file
      options: { max-size: "1m", max-file: "2" }

  postgres:
    image: postgres:16
    container_name: tipbot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tipbot
      TZ: UTC
    ports:
      - "5432:5432"
    depends_on:
      data-sentinel:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tipbot"]
      interval: 5s
      timeout: 3s
      retries: 30
    volumes:
      - tipbot_data:/var/lib/postgresql/data
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "5" }

  db-guard:
    image: postgres:16
    container_name: tipbot-db-guard
    restart: unless-stopped
    env_file: .env
    environment:
      TZ: UTC
      PGCONNECT_TIMEOUT: "5"
    depends_on:
      postgres:
        condition: service_healthy
    command:
      - /bin/sh
      - -lc
      - >
        set -euo pipefail;
        if [ -z "$$DATABASE_URL" ]; then echo "[db-guard] DATABASE_URL missing"; exit 2; fi;
        echo "[db-guard] Using DATABASE_URL=$$DATABASE_URL";
        for n in $$(seq 1 90); do
          if psql "$$DATABASE_URL" -tAc "SELECT 1" >/dev/null 2>&1; then
            SQL="SELECT
                   (SELECT to_regclass('public.users')  IS NOT NULL) AS has_users,
                   (SELECT to_regclass('public.ledger') IS NOT NULL) AS has_ledger,
                   (SELECT to_regclass('public.tips')   IS NOT NULL) AS has_tips_tbl";
            ROW=$$(psql "$$DATABASE_URL" -At -c "$$SQL" 2>/dev/null || echo '' );
            U=$$(echo "$$ROW" | awk -F'|' '{print $$1}');
            L=$$(echo "$$ROW" | awk -F'|' '{print $$2}');
            T=$$(echo "$$ROW" | awk -F'|' '{print $$3}');
            echo "[db-guard] tables: users=$$U ledger=$$L tips=$$T";
            if [ "$$U" = "t" ] && [ "$$L" = "t" ] && [ "$$T" = "t" ]; then
              echo "[db-guard] OK"; : > /tmp/healthy; break;
            fi
          fi;
          echo "[db-guard] not ready, retry=$$n"; sleep 2;
        done;
        exec tail -f /dev/null
    healthcheck:
      test: ["CMD-SHELL", "test -f /tmp/healthy"]
      interval: 5s
      timeout: 3s
      retries: 30
    logging:
      driver: json-file
      options: { max-size: "2m", max-file: "3" }

  # Stable in-network RPC endpoint. All app calls go to http://rpc-proxy:9918
  rpc-proxy:
    image: alpine:3.20
    container_name: tipbot-rpc-proxy
    restart: unless-stopped
    extra_hosts: ["host.docker.internal:host-gateway"]
    command: >
      sh -lc '
        apk add --no-cache socat >/dev/null &&
        exec socat TCP-LISTEN:9918,fork,reuseaddr TCP:host.docker.internal:9918
      '
    logging:
      driver: json-file
      options: { max-size: "2m", max-file: "3" }

  # Guard that waits for the node. MODE:
  #   lenient (default): healthy on any JSON reply (OK or -28 Loading block index)
  #   ready: healthy only when IBD=false (fully synced)
  rpc-guard:
    image: alpine:3.20
    container_name: tipbot-rpc-guard
    restart: unless-stopped
    env_file: .env
    environment:
      LKY_RPC_URL: http://rpc-proxy:9918
      NODE_RPC_URL: http://rpc-proxy:9918
      RPC_URL: http://rpc-proxy:9918
      RPC_GUARD_MODE: ${RPC_GUARD_MODE:-lenient}
      TZ: UTC
    depends_on:
      rpc-proxy:
        condition: service_started
    extra_hosts: ["host.docker.internal:host-gateway"]
    command:
      - /bin/sh
      - -lc
      - >
        set -euo pipefail;
        apk add --no-cache curl jq >/dev/null 2>&1 || true;
        URL="$${LKY_RPC_URL:-http://rpc-proxy:9918}";
        USERPASS="$${LKY_RPC_USER:-}:$${LKY_RPC_PASS:-}";
        MODE="$${RPC_GUARD_MODE:-lenient}";
        echo "[rpc-guard] waiting for node at $$URL (mode=$$MODE)";
        for n in $$(seq 1 1800); do
          OUT=$$(curl -sS --user "$$USERPASS" -H "content-type: application/json" \
                 --data '{"jsonrpc":"1.0","id":"ping","method":"getblockchaininfo","params":[]}' "$$URL" || true);
          ERR_CODE=$$(echo "$$OUT" | jq -r '.error.code // empty');
          IBD=$$(echo "$$OUT" | jq -r '.result.initialblockdownload // empty');
          CHAIN=$$(echo "$$OUT" | jq -r '.result.chain // empty');

          # If we got *any* JSON back, the node is reachable.
          if [ "$$MODE" = "lenient" ]; then
            if [ "$$ERR_CODE" = "-28" ] || [ -n "$$CHAIN" ]; then
              echo "[rpc-guard] OK (lenient): reachable; ERR_CODE=$$ERR_CODE, CHAIN=$$CHAIN, IBD=$$IBD";
              : > /tmp/healthy; break;
            fi
          else
            # ready-mode requires not in IBD and no -28 error
            if [ -n "$$CHAIN" ] && [ "$$IBD" = "false" ] && [ -z "$$ERR_CODE" ]; then
              echo "[rpc-guard] OK (ready): node synced (CHAIN=$$CHAIN)";
              : > /tmp/healthy; break;
            fi
          fi

          echo "[rpc-guard] not ready yet (mode=$$MODE, err=$$ERR_CODE, ibd=$$IBD) retry $$n"; sleep 3;
        done;
        exec tail -f /dev/null
    healthcheck:
      test: ["CMD-SHELL", "test -f /tmp/healthy"]
      interval: 5s
      timeout: 3s
      retries: 120
    logging:
      driver: json-file
      options: { max-size: "2m", max-file: "3" }

  bot:
    build: .
    container_name: tipbot-bot
    restart: unless-stopped
    env_file: .env
    environment:
      LKY_RPC_URL: http://rpc-proxy:9918
      NODE_RPC_URL: http://rpc-proxy:9918
      RPC_URL: http://rpc-proxy:9918
      PGOPTIONS: >-
        -c search_path=public
        -c default_transaction_read_only=off
        -c statement_timeout=15s
        -c lock_timeout=3s
        -c idle_in_transaction_session_timeout=10s
        -c client_min_messages=warning
      TZ: UTC
    depends_on:
      postgres: { condition: service_healthy }
      db-guard: { condition: service_healthy }
      rpc-guard: { condition: service_healthy }
    init: true
    command: ["npm", "run", "start:bot"]
    extra_hosts: ["host.docker.internal:host-gateway"]
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "5" }

  worker:
    build: .
    container_name: tipbot-worker
    restart: unless-stopped
    env_file: .env
    environment:
      LKY_RPC_URL: http://rpc-proxy:9918
      NODE_RPC_URL: http://rpc-proxy:9918
      RPC_URL: http://rpc-proxy:9918
      PGOPTIONS: >-
        -c search_path=public
        -c default_transaction_read_only=off
        -c statement_timeout=15s
        -c lock_timeout=3s
        -c idle_in_transaction_session_timeout=10s
        -c client_min_messages=warning
      TZ: UTC
    depends_on:
      postgres: { condition: service_healthy }
      db-guard: { condition: service_healthy }
      rpc-guard: { condition: service_healthy }
    init: true
    command: ["npm", "run", "start:worker"]
    extra_hosts: ["host.docker.internal:host-gateway"]
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "5" }

volumes:
  tipbot_data:
    external: true
    name: tipbot_pg_sql_2025_08_31_031701
