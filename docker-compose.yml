# docker-compose.yml (host-net for app to bypass RPC 403; fail-closed for DB)

services:
  # Refuse to start Postgres if data dir is empty / swapped
  data-sentinel:
    image: postgres:16
    container_name: tipbot-data-sentinel
    restart: unless-stopped
    volumes:
      - tipbot_data:/var/lib/postgresql/data
    command:
      - /bin/sh
      - -lc
      - >
        set -euo pipefail;
        D=/var/lib/postgresql/data; READY=/tmp/healthy;
        if [ ! -s "$$D/PG_VERSION" ]; then
          echo "[sentinel] FATAL: $$D is empty (PG_VERSION missing). Refusing init."; exit 42;
        fi;
        PGC=$$(command -v pg_controldata || echo /usr/lib/postgresql/16/bin/pg_controldata);
        SYSID_FILE="$$D/TIPBOT_SYSID";
        CUR=$$($$PGC "$$D" | awk -F': *' '/Database system identifier/{print $$2}');
        if [ -s "$$SYSID_FILE" ]; then
          OLD=$$(cat "$$SYSID_FILE");
          if [ "$$OLD" != "$$CUR" ]; then
            echo "[sentinel] FATAL: system identifier changed ($$OLD -> $$CUR). Refusing start."; exit 43;
          fi;
        else
          echo "$$CUR" > "$$SYSID_FILE";
        fi;
        touch "$$D/TIPBOT_SAFEGUARD";
        touch "$$READY";
        echo "[sentinel] OK: cluster present & id verified.";
        exec tail -f /dev/null
    healthcheck:
      test: ["CMD-SHELL", "test -f /tmp/healthy"]
      interval: 5s
      timeout: 3s
      retries: 30
    logging:
      driver: "json-file"
      options: { max-size: "1m", max-file: "2" }

  postgres:
    image: postgres:16
    container_name: tipbot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tipbot
      TZ: UTC
    ports:
      - "5432:5432" # expose to host so host-net containers can use 127.0.0.1:5432
    depends_on:
      data-sentinel:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tipbot"]
      interval: 5s
      timeout: 3s
      retries: 30
    volumes:
      - tipbot_data:/var/lib/postgresql/data
    logging:
      driver: "json-file"
      options: { max-size: "10m", max-file: "5" }

  # Gate the app on DB readiness + non-empty schema
  db-guard:
    image: postgres:16
    container_name: tipbot-db-guard
    restart: unless-stopped
    env_file: .env
    environment:
      TZ: UTC
      PGCONNECT_TIMEOUT: "5"
    depends_on:
      postgres:
        condition: service_healthy
    command:
      - /bin/sh
      - -lc
      - >
        set -euo pipefail;
        if [ -z "$$DATABASE_URL" ]; then echo "[db-guard] DATABASE_URL missing"; exit 2; fi;
        echo "[db-guard] Using DATABASE_URL";
        for i in $$(seq 1 90); do
          if psql "$$DATABASE_URL" -tAc "SELECT 1" >/dev/null 2>&1; then
            SQL="SELECT
                   (SELECT to_regclass('public.users')  IS NOT NULL) AS has_users,
                   (SELECT to_regclass('public.ledger') IS NOT NULL) AS has_ledger,
                   (SELECT to_regclass('public.tips')   IS NOT NULL) AS has_tips_tbl,
                   (SELECT COUNT(*) FROM public.users)  AS users_cnt";
            ROW=$$(psql "$$DATABASE_URL" -At -c "$$SQL" 2>/dev/null || echo '');
            HAS_USERS=$$(echo "$$ROW" | awk -F'|' '{print $$1}');
            HAS_LEDGER=$$(echo "$$ROW" | awk -F'|' '{print $$2}');
            HAS_TIPS_TBL=$$(echo "$$ROW" | awk -F'|' '{print $$3}');
            USERS_CNT=$$(echo "$$ROW" | awk -F'|' '{print $$4}');
            echo "[db-guard] tables: users=$$HAS_USERS ledger=$$HAS_LEDGER tips=$$HAS_TIPS_TBL users_cnt=$$USERS_CNT";
            if [ "$$HAS_USERS" = "t" ] && [ "$$HAS_LEDGER" = "t" ] && [ "$$HAS_TIPS_TBL" = "t" ] && [ "$$USERS_CNT" -ge 1 ]; then
              echo "[db-guard] OK"; touch /tmp/healthy; break;
            fi
          fi;
          echo "[db-guard] not ready, retry=$$i"; sleep 2;
        done;
        exec tail -f /dev/null
    healthcheck:
      test: ["CMD-SHELL", "test -f /tmp/healthy"]
      interval: 5s
      timeout: 3s
      retries: 30
    logging:
      driver: "json-file"
      options: { max-size: "2m", max-file: "3" }

  # Optional helper to confirm RPC from inside Docker if you want it
  rpc-guard:
    image: alpine:3.20
    container_name: tipbot-rpc-guard
    restart: unless-stopped
    env_file: .env
    network_mode: "host" # talk to 127.0.0.1:9918 directly
    command:
      - /bin/sh
      - -lc
      - >
        set -euo pipefail;
        apk add --no-cache curl jq >/dev/null;
        echo "[rpc-guard] waiting for RPC at $$LKY_RPC_URL ...";
        for i in $$(seq 1 90); do
          CODE=$$(curl -sS -o /tmp/r -w '%{http_code}' \
            --user "$$LKY_RPC_USER:$$LKY_RPC_PASS" \
            -H 'content-type: text/plain' \
            --data-binary '{"jsonrpc":"1.0","id":"ping","method":"getblockchaininfo","params":[]}' \
            "$$LKY_RPC_URL" || echo 000)
          if [ "$$CODE" = "200" ]; then
            BLK=$$(jq -r '.result.blocks // empty' /tmp/r 2>/dev/null || echo);
            echo "[rpc-guard] OK: http=200 blocks=$${BLK:-?}"; : > /tmp/healthy; exec tail -f /dev/null;
          else
            MSG=$$(cat /tmp/r 2>/dev/null | head -c 200 | tr -d '\n' || echo);
            echo "[rpc-guard] not ready ($$i): http=$$CODE msg=$${MSG:-none}";
          fi;
          sleep 2;
        done;
        echo "[rpc-guard] FATAL: RPC not reachable"; exit 42
    environment:
      # override to loopback so host-net containers bypass 403
      LKY_RPC_URL: http://127.0.0.1:9918
    healthcheck:
      test: ["CMD-SHELL", "test -f /tmp/healthy"]
      interval: 5s
      timeout: 3s
      retries: 30
    logging:
      driver: "json-file"
      options: { max-size: "1m", max-file: "2" }

  bot:
    build: .
    container_name: tipbot-bot
    restart: unless-stopped
    env_file: .env
    network_mode: "host" # use host net to hit 127.0.0.1 for RPC and DB
    environment:
      # Force both RPC and DB over loopback on host
      LKY_RPC_URL: http://127.0.0.1:9918
      NODE_RPC_URL: http://127.0.0.1:9918
      DATABASE_URL: postgres://tipbot_app:Likom1likom!@127.0.0.1:5432/tipbot
      PGOPTIONS: >-
        -c search_path=public
        -c default_transaction_read_only=off
        -c statement_timeout=15s
        -c lock_timeout=3s
        -c idle_in_transaction_session_timeout=10s
        -c client_min_messages=warning
      TZ: UTC
    depends_on:
      postgres: { condition: service_healthy }
      db-guard: { condition: service_healthy }
    init: true
    command: ["npm", "run", "start:bot"]
    logging:
      driver: "json-file"
      options: { max-size: "10m", max-file: "5" }

  worker:
    build: .
    container_name: tipbot-worker
    restart: unless-stopped
    env_file: .env
    network_mode: "host" # use host net to hit 127.0.0.1 for RPC and DB
    environment:
      # Force both RPC and DB over loopback on host
      LKY_RPC_URL: http://127.0.0.1:9918
      NODE_RPC_URL: http://127.0.0.1:9918
      DATABASE_URL: postgres://tipbot_app:Likom1likom!@127.0.0.1:5432/tipbot
      PGOPTIONS: >-
        -c search_path=public
        -c default_transaction_read_only=off
        -c statement_timeout=15s
        -c lock_timeout=3s
        -c idle_in_transaction_session_timeout=10s
        -c client_min_messages=warning
      TZ: UTC
    depends_on:
      postgres: { condition: service_healthy }
      db-guard: { condition: service_healthy }
    init: true
    command: ["npm", "run", "start:worker"]
    logging:
      driver: "json-file"
      options: { max-size: "10m", max-file: "5" }

volumes:
  tipbot_data:
    external: true
    name: tipbot_pg_sql_2025_08_31_031701
